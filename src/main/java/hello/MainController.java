package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;
//import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
private static final String CLIENTE_NEW="registrarse";
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    
    @GetMapping(path = "/agregar")
    public ModelAndView registro() {
     ModelAndView mav=new ModelAndView(CLIENTE_NEW);
     mav.addObject("user", new User());
        return mav;
    }
    
    @GetMapping(path = "/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    /*@GetMapping("/cliente/{id}")
    public ResponseEntity getCliente(@PathVariable("id") Integer id) {

        Optional<User> user = userRepository.findById(id);
        if (user == null) {
            return new ResponseEntity("No Customer found for ID " + id, HttpStatus.NOT_FOUND);
        }

        return new ResponseEntity(user, HttpStatus.OK);
    }*/

    @PostMapping(value = "/addcliente")
    public String createCliente(@ModelAttribute ("cliente") User user) {
    	userRepository.save(user);
    	 return "redirect:/demo/agregar";
    }
  

    /*@PostMapping(value = "/addcliente")
    public ResponseEntity createCliente(@RequestBody User user) {
        userRepository.save(user);
        return new ResponseEntity(user, HttpStatus.OK);
    }

    @DeleteMapping("/borrarcliente/{id}")
    public ResponseEntity deleteCliente(@PathVariable Integer id) {
        userRepository.deleteById(id);

        return new ResponseEntity(HttpStatus.OK);

    }
    /*	@PutMapping("/actualizardatos/{id}")
	public ResponseEntity<User> updateCliente(@RequestBody User user) {
	User userUpdate= getCliente(user.getId());
        userUpdate.setNombre(user.getNombre());
        userUpdate.setApellido(user.getApellido());
        userUpdate.setEmail(user.getEmail());
        userRepository.save(userUpdate);
		return new ResponseEntity<User>(userUpdate, HttpStatus.OK);
}*/
}
